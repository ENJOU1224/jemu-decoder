export default {
	'RV32A|AMOADD.W': ['00000QLRs2--Rs1--010Rd---0101111', '// rd = AMO32([rs1] + rs2)'],
	'RV32A|AMOAND.W': ['01100QLRs2--Rs1--010Rd---0101111', '// rd = AMO32([rs1] & rs2)'],
	'RV32A|AMOMAX.W': ['10100QLRs2--Rs1--010Rd---0101111', '// rd = AMO32(MAX(S([rs1], rs2)))'],
	'RV32A|AMOMAXU.W': ['11100QLRs2--Rs1--010Rd---0101111', '// rd = AMO32(MAX([rs1], rs2))'],
	'RV32A|AMOMIN.W': ['10000QLRs2--Rs1--010Rd---0101111', '// rd = AMO32(MIN(S([rs1], rs2)))'],
	'RV32A|AMOMINU.W': ['11000QLRs2--Rs1--010Rd---0101111', '// rd = AMO32(MIN([rs1], rs2))'],
	'RV32A|AMOOR.W': ['01000QLRs2--Rs1--010Rd---0101111', '// rd = AMO32([rs1] | rs2)'],
	'RV32A|AMOSWAP.W': ['00001QLRs2--Rs1--010Rd---0101111', '// rd = AMO32(SWAP([rs1], rs2))'],
	'RV32A|AMOXOR.W': ['00100QLRs2--Rs1--010Rd---0101111', '// rd = AMO32([rs1] ^ rs2)'],
	'RV32A|LR.W': ['00010QLRs2--00000010Rd---0101111', ''],
	'RV32A|SC.W': ['00011QLRs2--Rs1--010Rd---0101111', ''],
	'RV32D|FADD.D': ['0000001Rs2--Rs1--Rm-Rd---1010011', ''],
	'RV32D|FCLASS.D': ['111000100000Rs1--001Rd---1010011', ''],
	'RV32D|FCVT.D.S': ['010000100000Rs1--Rm-Rd---1010011', ''],
	'RV32D|FCVT.D.W': ['110100100000Rs1--Rm-Rd---1010011', ''],
	'RV32D|FCVT.D.WU': ['110100100001Rs1--Rm-Rd---1010011', ''],
	'RV32D|FCVT.S.D': ['010000000001Rs1--Rm-Rd---1010011', ''],
	'RV32D|FCVT.W.D': ['110000100000Rs1--Rm-Rd---1010011', ''],
	'RV32D|FCVT.WU.D': ['110000100001Rs1--Rm-Rd---1010011', ''],
	'RV32D|FDIV.D': ['0001101Rs2--Rs1--Rm-Rd---1010011', ''],
	'RV32D|FEQ.D': ['1010001Rs2--Rs1--010Rd---1010011', ''],
	'RV32D|FLD': ['============Rs1--011Rd---0000111', ''],
	'RV32D|FLE.D': ['1010001Rs2--Rs1--000Rd---1010011', ''],
	'RV32D|FLT.D': ['1010001Rs2--Rs1--001Rd---1010011', ''],
	'RV32D|FMADD.D': ['Rs3--01Rs2--Rs1--Rm-Rd---1000011', ''],
	'RV32D|FMAX.D': ['0010101Rs2--Rs1--001Rd---1010011', ''],
	'RV32D|FMIN.D': ['0010101Rs2--Rs1--000Rd---1010011', ''],
	'RV32D|FMSUB.D': ['Rs3--01Rs2--Rs1--Rm-Rd---1000111', ''],
	'RV32D|FMUL.D': ['0001001Rs2--Rs1--Rm-Rd---1010011', ''],
	'RV32D|FNMADD.D': ['Rs3--01Rs2--Rs1--Rm-Rd---1001111', ''],
	'RV32D|FNMSUB.D': ['Rs3--01Rs2--Rs1--Rm-Rd---1001011', ''],
	'RV32D|FSD': ['=======Rs2--Rs1--011=====0100111', ''],
	'RV32D|FSGNJ.D': ['0010001Rs2--Rs1--000Rd---1010011', ''],
	'RV32D|FSGNJN.D': ['0010001Rs2--Rs1--001Rd---1010011', ''],
	'RV32D|FSGNJX.D': ['0010001Rs2--Rs1--010Rd---1010011', ''],
	'RV32D|FSQRT.D': ['010110100000Rs1--Rm-Rd---1010011', ''],
	'RV32D|FSUB.D': ['0000101Rs2--Rs1--Rm-Rd---1010011', ''],
	'RV32F|FADD.S': ['0000000Rs2--Rs1--Rm-Rd---1010011', ''],
	'RV32F|FCLASS.S': ['111000000000Rs1--001Rd---1010011', ''],
	'RV32F|FCVT.S.W': ['110100000000Rs1--Rm-Rd---1010011', ''],
	'RV32F|FCVT.S.WU': ['110100000001Rs1--Rm-Rd---1010011', ''],
	'RV32F|FCVT.W.S': ['110000000000Rs1--Rm-Rd---1010011', ''],
	'RV32F|FCVT.WU.S': ['110000000001Rs1--Rm-Rd---1010011', ''],
	'RV32F|FDIV.S': ['0001100Rs2--Rs1--Rm-Rd---1010011', ''],
	'RV32F|FEQ.S': ['1010000Rs2--Rs1--010Rd---1010011', ''],
	'RV32F|FLE.S': ['1010000Rs2--Rs1--000Rd---1010011', ''],
	'RV32F|FLT.S': ['1010000Rs2--Rs1--001Rd---1010011', ''],
	'RV32F|FLW': ['============Rs1--010Rd---0000111', ''],
	'RV32F|FMADD.S': ['Rs3--00Rs2--Rs1--Rm-Rd---1000011', ''],
	'RV32F|FMAX.S': ['0010100Rs2--Rs1--001Rd---1010011', ''],
	'RV32F|FMIN.S': ['0010100Rs2--Rs1--000Rd---1010011', ''],
	'RV32F|FMSUB.S': ['Rs3--00Rs2--Rs1--Rm-Rd---1000111', ''],
	'RV32F|FMUL.S': ['0001000Rs2--Rs1--Rm-Rd---1010011', ''],
	'RV32F|FMV.W.X': ['111100000000Rs1--000Rd---1010011', ''],
	'RV32F|FMV.X.W': ['111000000000Rs1--000Rd---1010011', ''],
	'RV32F|FNMADD.S': ['Rs3--00Rs2--Rs1--Rm-Rd---1001111', ''],
	'RV32F|FNMSUB.S': ['Rs3--00Rs2--Rs1--Rm-Rd---1001011', ''],
	'RV32F|FSGNJ.S': ['0010000Rs2--Rs1--000Rd---1010011', ''],
	'RV32F|FSGNJN.S': ['0010000Rs2--Rs1--001Rd---1010011', ''],
	'RV32F|FSGNJX.S': ['0010000Rs2--Rs1--010Rd---1010011', ''],
	'RV32F|FSQRT.S': ['010110000000Rs1--Rm-Rd---1010011', ''],
	'RV32F|FSUB.S': ['0000100Rs2--Rs1--Rm-Rd---1010011', ''],
	'RV32F|FSW': ['=======Rs2--Rs1--010=====0100111', ''],
	'RV32I|ADD': ['0000000Rs2--Rs1--000Rd---0110011', 'rd = rs1 + rs2'],
	'RV32I|ADDI': ['============Rs1--000Rd---0010011', 'rd = rs1 + sext(imm[11:0], 12)'],
	'RV32I|AND': ['0000000Rs2--Rs1--111Rd---0110011', 'rd = rs1 & rs2'],
	'RV32I|ANDI': ['============Rs1--111Rd---0010011', 'rd = rs1 & sext(imm[11:0], 12)'],
	'RV32I|AUIPC': ['====================Rd---0010111', 'rd = pc + sext(imm[31:12], 32)'],
	'RV32I|BEQ': ['=======Rs2--Rs1--000=====1100011', 'rs1 == rs2 :: pc += sext(imm[12|10:5|4:1|11], 12)'],
	'RV32I|BGE': ['=======Rs2--Rs1--101=====1100011', 'S(rs1) >= S(rs2) :: pc += sext(imm[12|10:5|4:1|11], 12)'],
	'RV32I|BGEU': ['=======Rs2--Rs1--111=====1100011', 'rs1 >= rs2 :: pc += sext(imm[12|10:5|4:1|11], 12)'],
	'RV32I|BLT': ['=======Rs2--Rs1--100=====1100011', 'S(rs1) < S(rs2) :: pc += sext(imm[12|10:5|4:1|11], 12)'],
	'RV32I|BLTU': ['=======Rs2--Rs1--110=====1100011', 'rs1 < rs2 :: pc += sext(imm[12|10:5|4:1|11], 12)'],
	'RV32I|BNE': ['=======Rs2--Rs1--001=====1100011', 'rs1 != rs2 :: pc += sext(imm[12|10:5|4:1|11], 12)'],
	'RV32I|CSRRC': ['Csr---------Rs1--011Rd---1110011', '// var(t) = CSRs[csr]; CSRs[csr] &= ~rs1  ; rd = t'],
	'RV32I|CSRRCI': ['Csr---------=====111Rd---1110011', '// var(t) = CSRs[csr]; CSRs[csr] &= ~imm[4:0]; rd = t'],
	'RV32I|CSRRS': ['Csr---------Rs1--010Rd---1110011', '// var(t) = CSRs[csr]; CSRs[csr] |= ~rs1  ; rd = t'],
	'RV32I|CSRRSI': ['Csr---------=====110Rd---1110011', '// var(t) = CSRs[csr]; CSRs[csr] |= ~imm[4:0]; rd = t'],
	'RV32I|CSRRW': ['Csr---------Rs1--001Rd---1110011', '// var(t) = CSRs[csr]; CSRs[csr]  = ~rs1  ; rd = t'],
	'RV32I|CSRRWI': ['Csr---------=====101Rd---1110011', '// var(t) = CSRs[csr]; CSRs[csr]  = ~imm[4:0]; rd = t'],
	'RV32I|EBREAK': ['00000000000100000000000001110011', 'RaiseException(BREAKPOINT)'],
	'RV32I|ECALL': ['00000000000000000000000001110011', 'RaiseException(ENVIRONMENTCALL)'],
	'RV32I|FENCE.I': ['00000000000000000001000000001111', '// Fence(pred, succ);'],
	'RV32I|FENCE': ['0000P---S---00000000000000001111', '// Fence(pred, succ);'],
	'RV32I|JAL': ['====================Rd---1101111', 'rd = pc + 4n; pc += sext(imm[20|10:1|11|19:12], 20)'],
	'RV32I|JALR': ['============Rs1--000Rd---1100111', 'var(t) = pc + 4n; pc = (rs1 + sext(imm, 12)) & ~1n; rd = t'],
	'RV32I|LB': ['============Rs1--000Rd---0000011', 'rd = sext([rs1 + sext(imm, 12)], 8)'],
	'RV32I|LBU': ['============Rs1--100Rd---0000011', 'rd = zext([rs1 + sext(imm, 12)], 8)'],
	'RV32I|LH': ['============Rs1--001Rd---0000011', 'rd = sext([rs1 + sext(imm, 12)], 16)'],
	'RV32I|LHU': ['============Rs1--101Rd---0000011', 'rd = zext([rs1 + sext(imm, 12)], 16)'],
	'RV32I|LUI': ['====================Rd---0110111', 'rd = sext(imm << 12, 32)'],
	'RV32I|LW': ['============Rs1--010Rd---0000011', 'rd = sext([rs1 + sext(imm, 12)], 32)'],
	'RV32I|OR': ['0000000Rs2--Rs1--110Rd---0110011', 'rd = rs1 | rs2'],
	'RV32I|ORI': ['============Rs1--110Rd---0010011', 'rd = rs1 | sext(imm, 12)'],
	'RV32I|SB': ['=======Rs2--Rs1--000=====0100011', '[rs1 + sext(imm[11:5|4:0], 12), 8] = zext(rs2, 8) //[data, bit_width]'],
	'RV32I|SH': ['=======Rs2--Rs1--001=====0100011', '[rs1 + sext(imm[11:5|4:0], 12), 16] = rs2'],
	'RV32I|SLL': ['0000000Rs2--Rs1--001Rd---0110011', 'rd = rs1 << (rs2 & 0b111111n)'],
	'RV32I|SLT': ['0000000Rs2--Rs1--010Rd---0110011', 'rd = B64(S(rs1) < S(rs2)) // B64 Converts a bit into 64bit BigInt'],
	'RV32I|SLTI': ['============Rs1--010Rd---0010011', 'rd = S(rs1) < S(sext(imm[11:0], 12))'],
	'RV32I|SLTIU': ['============Rs1--011Rd---0010011', 'rd = rs1 < sext(imm[11:0], 12)'],
	'RV32I|SLTU': ['0000000Rs2--Rs1--011Rd---0110011', 'rd = rs1 < rs2'],
	'RV32I|SRA': ['0100000Rs2--Rs1--101Rd---0110011', 'rd = S(rs1) >> (rs2 & 0b111111n)'],
	'RV32I|SRL': ['0000000Rs2--Rs1--101Rd---0110011', 'rd = rs1 >> (rs2 & 0b111111n)'],
	'RV32I|SUB': ['0100000Rs2--Rs1--000Rd---0110011', 'rd = rs1 - rs2'],
	'RV32I|SW': ['=======Rs2--Rs1--010=====0100011', '[rs1 + sext(imm[11:5|4:0], 12), 32] = rs2'],
	'RV32I|XOR': ['0000000Rs2--Rs1--100Rd---0110011', 'rd = rs1 ^ rs2'],
	'RV32I|XORI': ['============Rs1--100Rd---0010011', 'rd = rs1 ^ sext(imm, 12)'],
	'RV32M|DIV': ['0000001Rs2--Rs1--100Rd---0110011', ''],
	'RV32M|DIVU': ['0000001Rs2--Rs1--101Rd---0110011', ''],
	'RV32M|MUL': ['0000001Rs2--Rs1--000Rd---0110011', ''],
	'RV32M|MULH': ['0000001Rs2--Rs1--001Rd---0110011', ''],
	'RV32M|MULHSU': ['0000001Rs2--Rs1--010Rd---0110011', ''],
	'RV32M|MULHU': ['0000001Rs2--Rs1--011Rd---0110011', ''],
	'RV32M|REM': ['0000001Rs2--Rs1--110Rd---0110011', ''],
	'RV32M|REMU': ['0000001Rs2--Rs1--111Rd---0110011', ''],
	'RV64A|AMOADD.D': ['00000QLRs2--Rs1--011Rd---0101111', '// rd = AMO64([rs1] + rs2)'],
	'RV64A|AMOAND.D': ['01100QLRs2--Rs1--011Rd---0101111', '// rd = AMO64([rs1] & rs2)'],
	'RV64A|AMOMAX.D': ['10100QLRs2--Rs1--011Rd---0101111', '// rd = AMO64(MAX(S([rs1], rs2)))'],
	'RV64A|AMOMAXU.D': ['11100QLRs2--Rs1--011Rd---0101111', '// rd = AMO64(MAX([rs1], rs2))'],
	'RV64A|AMOMIN.D': ['10000QLRs2--Rs1--011Rd---0101111', '// rd = AMO64(MIN(S([rs1], rs2)))'],
	'RV64A|AMOMINU.D': ['11000QLRs2--Rs1--011Rd---0101111', '// rd = AMO64(MIN([rs1], rs2))'],
	'RV64A|AMOOR.D': ['01000QLRs2--Rs1--011Rd---0101111', '// rd = AMO64([rs1] | rs2)'],
	'RV64A|AMOSWAP.D': ['00001QLRs2--Rs1--011Rd---0101111', '// rd = AMO64(SWAP([rs1], rs2))'],
	'RV64A|AMOXOR.D': ['00100QLRs2--Rs1--011Rd---0101111', '// rd = AMO64([rs1] ^ rs2)'],
	'RV64A|LR.D': ['00010QLRs2--00000011Rd---0101111', ''],
	'RV64A|SC.D': ['00011QLRs2--Rs1--011Rd---0101111', ''],
	'RV64D|FCVT.D.L': ['110100100010Rs1--Rm-Rd---1010011', ''],
	'RV64D|FCVT.D.LU': ['110100100011Rs1--Rm-Rd---1010011', ''],
	'RV64D|FCVT.L.D': ['110000100010Rs1--Rm-Rd---1010011', ''],
	'RV64D|FCVT.LU.D': ['110000100011Rs1--Rm-Rd---1010011', ''],
	'RV64D|FMV.D.X': ['111100100000Rs1--000Rd---1010011', ''],
	'RV64D|FMV.X.D': ['111000100000Rs1--000Rd---1010011', ''],
	'RV64F|FCVT.L.S': ['110000000010Rs1--Rm-Rd---1010011', ''],
	'RV64F|FCVT.LU.S': ['110000000011Rs1--Rm-Rd---1010011', ''],
	'RV64F|FCVT.S.L': ['110100000010Rs1--Rm-Rd---1010011', ''],
	'RV64F|FCVT.S.LU': ['110100000011Rs1--Rm-Rd---1010011', ''],
	'RV64I|ADDIW': ['============Rs1--000Rd---0011011', 'rd = sext(rs1 + sext(imm[11:0], 12), 32)'],
	'RV64I|ADDW': ['0000000Rs2--Rs1--000Rd---0111011', 'rd = sext(rs1 + rs2, 32)'],
	'RV64I|LD': ['============Rs1--011Rd---0000011', 'rd = [rs1 + sext(imm, 12)]'],
	'RV64I|LWU': ['============Rs1--110Rd---0000011', 'rd = zext([rs1 + sext(imm, 12)], 32)'],
	'RV64I|SD': ['=======Rs2--Rs1--011=====0100011', '[rs1 + sext(imm[11:5|4:0], 12), 64] = rs2'],
	'RV64I|SLLI': ['000000======Rs1--001Rd---0010011', 'rd = rs1 << B64(imm)'],
	'RV64I|SLLIW': ['000000======Rs1--001Rd---0011011', '(imm >> 5) == 0 :: rd = sext(rs1 << B64(imm), 32)'],
	'RV64I|SLLW': ['0000000Rs2--Rs1--001Rd---0111011', 'rd = sext((rs1 << zext(rs2, 5)), 32)'],
	'RV64I|SRAI': ['010000======Rs1--101Rd---0010011', 'rd = S(rs1) >> B64(imm)'],
	'RV64I|SRAIW': ['0100000=====Rs1--101Rd---0011011', '(imm >> 5) == 0 :: rd = sext(rs1 >> B64(imm), 32 - imm)'],
	'RV64I|SRAW': ['0100000Rs2--Rs1--101Rd---0111011', 'rd = sext(rs1 >> (rs2 & 0b11111n), 32 - parseInt(rs2 & 0b11111n))'],
	'RV64I|SRLI': ['000000======Rs1--101Rd---0010011', 'rd = rs1 >> B64(imm)'],
	'RV64I|SRLIW': ['000000======Rs1--101Rd---0011011', '(imm >> 5) == 0 :: rd = sext(zext(rs1, 32) >> B64(imm), 32)'],
	'RV64I|SRLW': ['0000000Rs2--Rs1--101Rd---0111011', 'rd = sext(zext(rs1, 32) >> (rs2 & 0b11111n), 32)'],
	'RV64I|SUBW': ['0100000Rs2--Rs1--000Rd---0111011', 'rd = sext(rs1 - rs2, 32)'],
	'RV64M|DIVUW': ['0000001Rs2--Rs1--101Rd---0111011', ''],
	'RV64M|DIVW': ['0000001Rs2--Rs1--100Rd---0111011', ''],
	'RV64M|MULW': ['0000001Rs2--Rs1--000Rd---0111011', ''],
	'RV64M|REMUW': ['0000001Rs2--Rs1--111Rd---0111011', ''],
	'RV64M|REMW': ['0000001Rs2--Rs1--110Rd---0111011', ''],
	'$JEMU|TRAP.GOOD': ['00000000000000000000000001101011', '$(SIG_HALT)'],
	'$JEMU|TRAP.BAD': ['10000000000000000000000001101011', '$(SIG_HALT)'],
	'$JEMU|PUTCH': ['00000000000000000000000001111011', 'cpu.print(cpu.x[10])']
}
